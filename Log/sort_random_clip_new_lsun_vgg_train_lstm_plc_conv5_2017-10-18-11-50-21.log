I1018 11:50:21.885784 33626 caffe.cpp:218] Using GPUs 0
I1018 11:50:21.979926 33626 caffe.cpp:223] GPU 0: GeForce GTX TITAN X
I1018 11:50:22.565418 33626 solver.cpp:44] Initializing solver from parameters: 
test_iter: 10
test_interval: 1000
base_lr: 0.0001
display: 50
max_iter: 10000000
lr_policy: "step"
gamma: 0.1
momentum: 0.9
weight_decay: 0.005
stepsize: 30000
solver_mode: GPU
device_id: 0
random_seed: 1701
net: "./Def/deploy_vgg16_lsun_lstm_conv5_sort_random_clip.prototxt"
train_state {
  level: 0
  stage: ""
}
test_state {
  stage: "test-on-test"
}
average_loss: 100
clip_gradients: 50
iter_size: 5
type: "SGD"
I1018 11:50:22.565507 33626 solver.cpp:87] Creating training net from net file: ./Def/deploy_vgg16_lsun_lstm_conv5_sort_random_clip.prototxt
I1018 11:50:22.566385 33626 net.cpp:294] The NetState phase (0) differed from the phase (1) specified by a rule in layer data
I1018 11:50:22.566402 33626 net.cpp:294] The NetState phase (0) differed from the phase (1) specified by a rule in layer Silence
I1018 11:50:22.566619 33626 net.cpp:51] Initializing net from parameters: 
name: "VGG-Places365"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "data"
  type: "ImageData"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    mirror: true
    crop_size: 224
    mean_value: 104
    mean_value: 117
    mean_value: 123
  }
  image_data_param {
    source: "../Data/lsun_train_list_12w.txt"
    batch_size: 5
    shuffle: true
    new_height: 256
    new_width: 256
  }
}
layer {
  name: "label_tran"
  type: "Python"
  bottom: "label"
  top: "reshape-label"
  top: "clip_markers"
  python_param {
    module: "data_preparation_sort_max_clip"
    layer: "ReshapeLabel"
  }
}
layer {
  name: "conv1_1"
  type: "Convolution"
  bottom: "data"
  top: "conv1_1"
  convolution_param {
    num_output: 64
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu1_1"
  type: "ReLU"
  bottom: "conv1_1"
  top: "conv1_1"
}
layer {
  name: "conv1_2"
  type: "Convolution"
  bottom: "conv1_1"
  top: "conv1_2"
  convolution_param {
    num_output: 64
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu1_2"
  type: "ReLU"
  bottom: "conv1_2"
  top: "conv1_2"
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1_2"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv2_1"
  type: "Convolution"
  bottom: "pool1"
  top: "conv2_1"
  convolution_param {
    num_output: 128
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu2_1"
  type: "ReLU"
  bottom: "conv2_1"
  top: "conv2_1"
}
layer {
  name: "conv2_2"
  type: "Convolution"
  bottom: "conv2_1"
  top: "conv2_2"
  convolution_param {
    num_output: 128
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu2_2"
  type: "ReLU"
  bottom: "conv2_2"
  top: "conv2_2"
}
layer {
  name: "pool2"
  type: "Pooling"
  bottom: "conv2_2"
  top: "pool2"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv3_1"
  type: "Convolution"
  bottom: "pool2"
  top: "conv3_1"
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu3_1"
  type: "ReLU"
  bottom: "conv3_1"
  top: "conv3_1"
}
layer {
  name: "conv3_2"
  type: "Convolution"
  bottom: "conv3_1"
  top: "conv3_2"
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu3_2"
  type: "ReLU"
  bottom: "conv3_2"
  top: "conv3_2"
}
layer {
  name: "conv3_3"
  type: "Convolution"
  bottom: "conv3_2"
  top: "conv3_3"
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu3_3"
  type: "ReLU"
  bottom: "conv3_3"
  top: "conv3_3"
}
layer {
  name: "pool3"
  type: "Pooling"
  bottom: "conv3_3"
  top: "pool3"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv4_1"
  type: "Convolution"
  bottom: "pool3"
  top: "conv4_1"
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu4_1"
  type: "ReLU"
  bottom: "conv4_1"
  top: "conv4_1"
}
layer {
  name: "conv4_2"
  type: "Convolution"
  bottom: "conv4_1"
  top: "conv4_2"
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu4_2"
  type: "ReLU"
  bottom: "conv4_2"
  top: "conv4_2"
}
layer {
  name: "conv4_3"
  type: "Convolution"
  bottom: "conv4_2"
  top: "conv4_3"
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu4_3"
  type: "ReLU"
  bottom: "conv4_3"
  top: "conv4_3"
}
layer {
  name: "pool4"
  type: "Pooling"
  bottom: "conv4_3"
  top: "pool4"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv5_1"
  type: "Convolution"
  bottom: "pool4"
  top: "conv5_1"
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu5_1"
  type: "ReLU"
  bottom: "conv5_1"
  top: "conv5_1"
}
layer {
  name: "conv5_2"
  type: "Convolution"
  bottom: "conv5_1"
  top: "conv5_2"
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu5_2"
  type: "ReLU"
  bottom: "conv5_2"
  top: "conv5_2"
}
layer {
  name: "conv5_3"
  type: "Convolution"
  bottom: "conv5_2"
  top: "conv5_3"
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu5_3"
  type: "ReLU"
  bottom: "conv5_3"
  top: "conv5_3"
}
layer {
  name: "conv5_3_re"
  type: "Reshape"
  bottom: "conv5_3"
  top: "conv5_3_re"
  reshape_param {
    shape {
      dim: 0
      dim: 0
      dim: -1
    }
  }
}
layer {
  name: "conv5_3_tran"
  type: "Python"
  bottom: "conv5_3_re"
  top: "conv5_3_tran"
  python_param {
    module: "data_preparation_sort_max_clip"
    layer: "DataTransposeSortRandomClip"
  }
}
layer {
  name: "lstm1"
  type: "LSTM"
  bottom: "conv5_3_tran"
  bottom: "clip_markers"
  top: "lstm1"
  recurrent_param {
    num_output: 512
    weight_filler {
      type: "uniform"
      min: -0.01
      max: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "lstm1-drop"
  type: "Dropout"
  bottom: "lstm1"
  top: "lstm1-drop"
  dropout_param {
    dropout_ratio: 0.5
  }
}
layer {
  name: "fc-final"
  type: "InnerProduct"
  bottom: "lstm1-drop"
  top: "fc-final"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
    axis: 2
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "fc-final"
  bottom: "reshape-label"
  top: "loss"
  softmax_param {
    axis: 2
  }
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "fc-final"
  bottom: "reshape-label"
  top: "accuracy"
  accuracy_param {
    axis: 2
  }
}
I1018 11:50:22.566864 33626 layer_factory.hpp:77] Creating layer data
I1018 11:50:22.566927 33626 net.cpp:84] Creating Layer data
I1018 11:50:22.566942 33626 net.cpp:380] data -> data
I1018 11:50:22.566992 33626 net.cpp:380] data -> label
I1018 11:50:22.567030 33626 image_data_layer.cpp:38] Opening file ../Data/lsun_train_list_12w.txt
I1018 11:50:23.141655 33626 image_data_layer.cpp:53] Shuffling data
I1018 11:50:23.514511 33626 image_data_layer.cpp:63] A total of 1200000 images.
I1018 11:50:23.520021 33626 image_data_layer.cpp:90] output data size: 5,3,224,224
I1018 11:50:23.531492 33626 net.cpp:122] Setting up data
I1018 11:50:23.531527 33626 net.cpp:129] Top shape: 5 3 224 224 (752640)
I1018 11:50:23.531534 33626 net.cpp:129] Top shape: 5 (5)
I1018 11:50:23.531538 33626 net.cpp:137] Memory required for data: 3010580
I1018 11:50:23.531555 33626 layer_factory.hpp:77] Creating layer label_tran
  File "/home/deep/LSTM-SCENE/train_conv_spp/data_preparation_sort_max_clip.py", line 84
    self.PER=np.zeros([self.len,self.batch)
                                          ^
SyntaxError: invalid syntax
